#ifndef LEXER_HPP
#define LEXER_HPP

#include <string>
#include <vector>

enum class TokenType {
    // Keywords
    Var, Func, If, Else, While, For, Return, Break, Continue, Define, Bigint, True, False, Null, Include,

    // Types
    Int, Float, String, Array, Matrix, BigInt, Rational, Irrational, Complex,

    // Operators
    Plus, Minus, Star, Slash, Percent, Caret, Equal, NotEqual, Less, LessEqual, Greater, GreaterEqual, Assign, Bang,

    // Delimiters
    LParen, RParen, LBrace, RBrace, LBracket, RBracket, Comma, Dot, Semicolon,

    // Literals
    Number, String, ComplexNumber, ImaginaryUnit,

    // Identifiers
    Identifier,

    // Special
    EndOfFile, Unknown
};

struct Token {
    TokenType type;
    std::string text;
    int line;
    int column;

    Token(TokenType type, const std::string& text, int line, int column)
        : type(type), text(text), line(line), column(column) {}
};

class Lexer {
public:
    std::vector<Token> tokenize(const std::string& src);
};

#endif // LEXER_HPP
