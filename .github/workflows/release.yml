name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            executable: lamina
            archive: tar.gz
          - os: windows-latest
            name: windows
            executable: lamina.exe
            archive: zip
          - os: macos-latest
            name: macos
            executable: lamina
            archive: tar.gz

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup build environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Setup build environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-gcc
        path-type: inherit

    - name: Setup build environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Xcode command line tools should be available
        xcode-select --install || true

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      working-directory: interpreter
      shell: bash
      run: |
        echo "Building Lamina for ${{ matrix.name }}..."
        
        # Use different compiler flags for different platforms
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          # macOS doesn't support -static-libgcc
          g++ -std=c++17 -O3 -DNDEBUG \
            main.cpp lexer.cpp parser.cpp interpreter.cpp \
            -o ${{ matrix.executable }}
        else
          # Linux supports static linking
          g++ -std=c++17 -O3 -DNDEBUG -static-libgcc -static-libstdc++ \
            main.cpp lexer.cpp parser.cpp interpreter.cpp \
            -o ${{ matrix.executable }}
        fi
          
        # Verify the build
        ./${{ matrix.executable }} --help || echo "No help option available"
        
        echo "Build completed successfully!"

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: interpreter
      shell: bash
      run: |
        # Use MSYS2 environment for MinGW
        export PATH="/c/msys64/mingw64/bin:$PATH"
        
        echo "Building Lamina for ${{ matrix.name }}..."
        
        # Windows with MSYS2 supports static linking
        g++ -std=c++17 -O3 -DNDEBUG -static-libgcc -static-libstdc++ \
          main.cpp lexer.cpp parser.cpp interpreter.cpp \
          -o ${{ matrix.executable }}
          
        # Verify the build
        if [ -f "${{ matrix.executable }}" ]; then
            echo "Build completed successfully!"
        else
            echo "Build failed - executable not found"
            exit 1
        fi

    - name: Prepare release package (Linux/macOS)
      if: matrix.os != 'windows-latest'
      working-directory: interpreter
      shell: bash
      run: |
        mkdir -p ../release-temp
        cp ${{ matrix.executable }} ../release-temp/
        
        # Copy examples if they exist
        if [ -d "examples" ]; then
          cp -r examples ../release-temp/
        fi
        
        # Copy documentation
        cp ../README.md ../release-temp/
        cp ../LICENSE ../release-temp/
        
        # Create version info
        echo "Lamina Interpreter" > ../release-temp/VERSION.txt
        echo "Build date: $(date)" >> ../release-temp/VERSION.txt
        echo "Platform: ${{ matrix.name }}" >> ../release-temp/VERSION.txt
        echo "Compiler: g++" >> ../release-temp/VERSION.txt
        
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Version: ${{ github.ref_name }}" >> ../release-temp/VERSION.txt
        else
          echo "Version: ${{ github.sha }}" >> ../release-temp/VERSION.txt
        fi

    - name: Prepare release package (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: interpreter
      shell: bash
      run: |
        # Use MSYS2 environment for MinGW
        export PATH="/c/msys64/mingw64/bin:$PATH"
        
        mkdir -p ../release-temp
        cp ${{ matrix.executable }} ../release-temp/
        
        # Copy examples if they exist
        if [ -d "examples" ]; then
          cp -r examples ../release-temp/
        fi
        
        # Copy documentation
        cp ../README.md ../release-temp/
        cp ../LICENSE ../release-temp/
        
        # Create version info
        echo "Lamina Interpreter" > ../release-temp/VERSION.txt
        echo "Build date: $(date)" >> ../release-temp/VERSION.txt
        echo "Platform: ${{ matrix.name }}" >> ../release-temp/VERSION.txt
        echo "Compiler: g++" >> ../release-temp/VERSION.txt
        
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Version: ${{ github.ref_name }}" >> ../release-temp/VERSION.txt
        else
          echo "Version: ${{ github.sha }}" >> ../release-temp/VERSION.txt
        fi

    - name: Create archive (Linux/macOS)
      if: matrix.archive == 'tar.gz'
      shell: bash
      run: |
        cd release-temp
        tar -czf ../lamina-${{ matrix.name }}-x64.tar.gz *
        cd ..

    - name: Create archive (Windows)
      if: matrix.archive == 'zip'
      shell: bash
      run: |
        cd release-temp
        zip -r ../lamina-${{ matrix.name }}-x64.zip *
        cd ..

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: lamina-${{ matrix.name }}-x64
        path: lamina-${{ matrix.name }}-x64.*

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Get tag annotation
      id: tag_data
      run: |
        # 获取标签注释信息
        TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
        
        # 如果有标签注释，使用它；否则使用默认内容
        if [ -n "$TAG_MESSAGE" ]; then
          echo "HAS_ANNOTATION=true" >> $GITHUB_OUTPUT
          # 转义换行符以便在 GitHub Actions 中使用
          echo "TAG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "HAS_ANNOTATION=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Lamina ${{ github.ref_name }}
        body: |
          ${{ steps.tag_data.outputs.HAS_ANNOTATION == 'true' && steps.tag_data.outputs.TAG_CONTENT || format('## Lamina Interpreter {0}
          
          ###  新版本发布
          
          这是 Lamina 解释器的 {0} 版本。
          
          ###  下载说明
          
          - **Linux**: 下载 `lamina-linux-x64.tar.gz`
          - **Windows**: 下载 `lamina-windows-x64.zip`  
          - **macOS**: 下载 `lamina-macos-x64.tar.gz`
          
          ###  使用方法
          
          1. 解压下载的文件
          2. 运行解释器:
             ```bash
             # 交互模式
             ./lamina
             
             # 执行脚本
             ./lamina script.lm
             ```
          ', github.ref_name, github.ref_name) }}
        draft: false
        prerelease: false
        files: |
          artifacts/lamina-linux-x64/lamina-linux-x64.tar.gz
          artifacts/lamina-windows-x64/lamina-windows-x64.zip
          artifacts/lamina-macos-x64/lamina-macos-x64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
